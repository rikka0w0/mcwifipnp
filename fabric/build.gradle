plugins {
  id 'fabric-loom' version '1.8+'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

version = project.mod_version + "-" + project.minecraft_version + "-fabric"
group = project.mod_group_id

base {
  archivesName = project.mod_id
}

dependencies {
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings loom.officialMojangMappings()
  modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
  modImplementation "com.google.code.findbugs:jsr305:3.0.2"
}

sourceSets {
  main {
    java {
      srcDir "../src/main/java"
    }
    resources {
      srcDir "../src/main/resources"
      srcDir "src/generated/resources"
    }
  }
}

tasks.withType(ProcessResources).configureEach {
  var replaceProperties = [
    minecraft_version_min : project.minecraft_version_min,
    minecraft_version_max : project.minecraft_version_max,
    fabric_version_range : project.fabric_version_range,
    fabric_loader_version_range : project.fabric_loader_version_range,
    version: project.mod_version,
    pack_format_number: project.pack_format_number,
  ]
  inputs.properties replaceProperties
  filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
    expand replaceProperties + [project: project]
  }
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
  it.options.release = 21
}

java.withSourcesJar()

jar {
  from("../LICENSE") {
  }
}
