plugins {
  id 'java-library'
  id 'eclipse'
  id 'idea'
  id 'net.neoforged.gradle.userdev' version '7.0.+'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

version = project.mod_version + "-" + project.minecraft_version + "-neoforge"
group = project.mod_group_id

base {
  archivesName = project.mod_id
}

repositories {
  mavenLocal()
}

minecraft {
  runs {
    configureEach {
      workingDirectory project.file('run')
      systemProperty 'forge.logging.markers', 'REGISTRIES'
      systemProperty 'forge.logging.console.level', 'debug'
      modSource project.sourceSets.main
    }
    client {
      systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    data {
      programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
  }
}

dependencies {
  implementation "net.neoforged:neoforge:${project.neo_version}"
}

sourceSets {
  main {
    java {
      srcDir "../src/main/java"
    }
    resources {
      srcDir "../src/main/resources"
      srcDir "src/generated/resources"
    }
  }
}

tasks.withType(ProcessResources).configureEach {
  var replaceProperties = [
    minecraft_version_min : project.minecraft_version_min,
    minecraft_version_max : project.minecraft_version_max,
    neo_version_range : project.neo_version_range,
    neo_loader_version_range : project.neo_loader_version_range,
    mod_version: project.mod_version,
    pack_format_number: project.pack_format_number,
  ]
  inputs.properties replaceProperties
  filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
    expand replaceProperties + [project: project]
  }
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = 'UTF-8'
  it.options.release = 21
}

java.withSourcesJar()

jar {
  from("../LICENSE") {
  }
}

idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }
}